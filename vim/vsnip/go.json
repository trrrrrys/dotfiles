{
	"package main": {
		"prefix": ["pm"],
		"body": ["package main"]
	},
	"package": {
		"prefix": ["pa"],
		"body": ["package $0"]
	},
	"imports": {
		"prefix": ["ims"],
		"body": ["import (", "\t$0", ")"]
	},
	"sq \"github.com/Masterminds/squirrel\"": {
		"prefix": ["importsquirrel"],
		"body": ["sq \"github.com/Masterminds/squirrel\""]
	},
	"init": {
		"prefix": ["init"],
		"body": [
			"func init() {", 
			"\t$1", 
			"}$0"
		]
	},
	"main": {
		"prefix": ["main"],
		"body": [
			"func main() {",
			"\t$1",
			"}"
		]
	},
	"forr": {
		"prefix": ["forr"],
		"body": [
			"for _, v := range $1 {",
			"\t$2",
			"}$0"
		]
	},
	"fori": {
		"prefix": ["fori"],
		"body": ["for i := 0; i < ${1:v}; i++ {", "\t$2", "}$0"]
	},
	"append": {
		"prefix": ["ap"],
		"body": ["$1 = append$2"]
	},
	"st": {
		"prefix": ["st"],
		"body": ["type ${1:st} struct {", "\t$2", "}$0"]
	},
	"interface": {
		"prefix": ["interface"],
		"body": ["type ${1:st} interface {", "\t$2", "}$0"]
	},
	"panic(err)": {
		"prefix": ["panicerr"],
		"body": [
			"if err != nil {", 
			"\tpanic(err)",
			"}$0"
		]
	},
	"meth": {
		"prefix": ["meth"],
		"body": [
			"func (${1}) ${2:Method}($3) $4 {",
			"\t$5",
			"}"
		]
	},
	"fmt.Println(\"\")": {
		"prefix": ["fn\""],
		"body": ["fmt.Println(\"${1:$TM_SELECTED_TEXT}\")$0"]
	},
	"fmt.Println": {
		"prefix": ["fn"],
		"body": ["fmt.Println(${1:$TM_SELECTED_TEXT})$0"]
	},
	"fmt.Printf": {
		"prefix": ["ff"],
		"body": ["fmt.Printf(\"$1: %v\\n\", $1)$0"]
	},
	"log.Println()": {
		"prefix": ["ln"],
		"body": ["log.Println(${1:$TM_SELECTED_TEXT})$0"]
	},
	"log.Println(\"\")": {
		"prefix": ["ln\""],
		"body": ["log.Println(\"${1:$TM_SELECTED_TEXT}\")$0"]
	},
	"log.Printf": {
		"prefix": ["lf"],
		"body": ["log.Printf(\"$1: %v\\n\", $1)$0"]
	},
	"json": {
		"prefix": ["json"],
		"body": ["`json:\"$1\"`"]
	},
	"func": {
		"prefix": ["func"],
		"body": ["func $1() {", "\t$2", "}"]
	},
	"context.Context": {
		"prefix": ["ctxa"],
		"body": ["ctx context.Context"]
	},
	"w http.ResponseWriter, r *http.Requrest": {
		"prefix": ["wr"],
		"body": ["w http.ResponseWriter, r *http.Requrest"]
	},
	"func f(w http.ResponseWriter, r *http.Requrest)": {
		"prefix": ["wrf"],
		"body": [
			"func $1(w http.ResponseWriter, r *http.Requrest) {",
			"\t$0",
			"}"
		]
	},
	"mysqltmpl": {
		"prefix": ["mysqltmpl"],
		"body": [
			"c := mysql.Config{}",
			"db, err :=  sql.Open(\"mysql\", c.FormatDSN()+\"&charset=utf8mb4\")",
			"if err == nil {",
			"\terr = db.Ping()",
			"}",
			"if err != nil {",
			"\t",
			"}",
			"db.SetMaxIdleConns(20)",
			"db.SetConnMaxIdleTime(10 * time.Minute)"
		]
	},
	"test function": {
		"prefix": ["test"],
		"body": ["func Test${1:Function}(t *testing.T) {", "\t$2", "}"]
	},
	"table test": {
		"prefix": ["tt"],
		"body": [
			"var tests = []struct {",
			"\tname string",
			"\tin string",
			"\twant string",
			"}{",
			"{$1},",
			"}",
			"for _, tt := range tests {",
			"\ttt := tt",
			"\tt.Run(tt.name, func(t *testing.T){",
			"\t\t// get value",
			"\t\tgot, err := f()",
			"\t\tif err != nil {",
			"\t\t\tt.Fatalf(\"error: %+v\", err)",
			"\t\t}",
			"\tif got != tt.expected {",
			"\t\t\tt.Errorf(\"expect: %v, got: %v\", tt.expected, got)",
			"\t}",
			"\t})",
			"}"
		]
	},
	"benchmark test": {
		"prefix": ["benchmark"],
		"body": [
			"func Benchmark${1:Function}(b *testing.B) {",
			"\tb.ResetTimer()",
			"\tfor i := 0; i < b.N; i++ {",
			"\t\t$2",
			"\t}",
			"}"
		]
	},
	"todot": {
		"prefix": "todot",
		"body": [
			"// ${VIM:system('python -c \"import sys;from datetime import datetime as dt;sys.stdout.write(str(dt.now()))\"')}",
			"// TODO: $0"
		]
	}
}
